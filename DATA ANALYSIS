

import pandas as pd

# loaded your data into pandas DataFrames
# sales_df, customer_df, and product_df

# Data Cleaning and Preparation
# For simplicity, let's assume the data is clean and prepared

# Exploratory Data Analysis (EDA)
# Summary statistics
print("Summary Statistics:")
print(sales_df.describe())

# Visualize sales trends over time
import matplotlib.pyplot as plt

sales_df['Date'] = pd.to_datetime(sales_df['Date'])  # Convert 'Date' column to datetime
sales_df.set_index('Date', inplace=True)  # Set 'Date' column as index

monthly_sales = sales_df.resample('M').sum()  # Resample sales data by month and sum
monthly_sales['Revenue'].plot(kind='line', figsize=(10, 6), title='Monthly Sales Trends')
plt.ylabel('Revenue ($)')
plt.xlabel('Date')
plt.show()

# Key Performance Metrics
# Calculate total revenue
total_revenue = sales_df['Revenue'].sum()
print("Total Revenue:", total_revenue)

# Calculate average order value (AOV)
aov = sales_df['Revenue'].mean()
print("Average Order Value (AOV):", aov)

# Calculate conversion rate
total_orders = len(sales_df)
total_visits = len(customer_df)
conversion_rate = total_orders / total_visits
print("Conversion Rate:", conversion_rate)

# Sales Trends Analysis
# Identify seasonal patterns (using seasonal decomposition)
from statsmodels.tsa.seasonal import seasonal_decompose

decomposition = seasonal_decompose(monthly_sales['Revenue'], model='multiplicative')
trend = decomposition.trend
seasonal = decomposition.seasonal
residual = decomposition.resid

plt.figure(figsize=(10, 8))

plt.subplot(411)
plt.plot(monthly_sales['Revenue'], label='Original')
plt.legend(loc='best')

plt.subplot(412)
plt.plot(trend, label='Trend')
plt.legend(loc='best')

plt.subplot(413)
plt.plot(seasonal, label='Seasonal')
plt.legend(loc='best')

plt.subplot(414)
plt.plot(residual, label='Residuals')
plt.legend(loc='best')

plt.tight_layout()
plt.show()

# Product and Category Analysis
# Identify top-selling products
top_products = sales_df.groupby('Product')['Revenue'].sum().sort_values(ascending=False).head(10)
print("Top Selling Products:")
print(top_products)

# Customer Behavior Analysis
# Analyze purchasing patterns
purchase_patterns = sales_df.groupby('Customer')['Revenue'].sum().sort_values(ascending=False)
print("Purchase Patterns:")
print(purchase_patterns)

# Segment customers based on their behavior
# For simplicity, let's assume segmenting customers into high, medium, and low-value based on total revenue
customer_segments = pd.qcut(purchase_patterns, q=[0, 0.33, 0.66, 1], labels=['Low-Value', 'Medium-Value', 'High-Value'])
print("Customer Segments:")
print(customer_segments)

# Additional analyses and visualizations can be performed based on specific requirements

